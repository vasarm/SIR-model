# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GIFcreate.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from tkinter.constants import S
from PyQt5 import QtCore, QtGui, QtWidgets
import os

import matplotlib.pyplot as plt
import numpy as np
import os
from matplotlib import colors
from matplotlib.animation import FuncAnimation
import seaborn as sns
import warnings


def return_lattice_data_file_names(path):
    data = [file for file in os.listdir(path)
            if os.path.isfile("{}/{}".format(path, file))
            ]
    lattice_data_file_names = [name for name in data if name[-4:]
                               == ".npy" and name[:-4].isdigit()]

    return lattice_data_file_names


def load_count_data(path):
    try:
        infected = np.load("{}/infected.npy".format(path))
        susceptible = np.load("{}/susceptible.npy".format(path))
        immune = np.load("{}/immune.npy".format(path))
        steps = np.load("{}/steps.npy".format(path))
    except IOError as e:
        raise e
    return [steps, infected, susceptible, immune]


def fun_create_gif(path, save_path, file, worker, fps=6, dpi=100):
    steps, infected, susceptible, immune = load_count_data(path)

    sns.set_style("dark")

    warnings.filterwarnings("ignore")

    fig, (ax1, ax2) = plt.subplots(
        nrows=2, gridspec_kw={'height_ratios': [4, 1]})
    plt.tight_layout()

    cmap = colors.ListedColormap(["black", "yellow", "red", "green"])
    grid = ax1.imshow(np.load(
        "{}/{}.npy".format(path, str(steps[0]))), interpolation="nearest", cmap=cmap, vmin=0, vmax=3)
    line1, = ax2.plot(steps[0], infected[0], color="red")
    line2, = ax2.plot(steps[0], susceptible[0], color="yellow")
    line3, = ax2.plot(steps[0], immune[0], color="green")

    def update(frame):
        worker.progress.emit(frame)
        grid.set_data(np.load("{}/{}.npy".format(path, str(steps[frame]))))
        line1.set_data(steps[0: frame+1], infected[0: frame+1])
        line2.set_data(steps[0: frame+1], susceptible[0: frame+1])
        line3.set_data(steps[0: frame+1], immune[0: frame+1])
        ax2.relim()
        ax2.autoscale_view()
        ax1.relim()
        ax1.autoscale_view()

        return [grid, line1, line2, line3]

    animation = FuncAnimation(
        fig, update, frames=np.arange(0, len(steps)), blit=False, interval=100, repeat=True)

    animation.save("{}/{}.gif".format(save_path, file), fps=fps,
                   bitrate=-1, codec="libx264", dpi=dpi)


class Worker(QtCore.QObject):
    finished = QtCore.pyqtSignal()
    progress = QtCore.pyqtSignal(int)
    error = QtCore.pyqtSignal(Exception)

    def __init__(self, path, save_path, file, fps, dpi, parent=None):
        super(QtCore.QObject, self).__init__()
        self.path = path
        self.save_path = save_path
        self.file = file
        self.fps = fps
        self.dpi = dpi

    def run(self):
        try:
            if self.file == "":
                file_name = os.path.basename(self.path)
            else:
                file_name = self.file
            fun_create_gif(path=self.path, save_path=self.save_path, file=file_name,
                           fps=self.fps, dpi=self.dpi, worker=self)
        except IOError as e:
            self.error.emit(e)
        except Exception as e:
            self.error.emit(e)
        self.finished.emit()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800, 410)

        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ProgramLabel = QtWidgets.QLabel(self.centralwidget)
        self.ProgramLabel.setGeometry(QtCore.QRect(10, 10, 781, 91))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(11)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.ProgramLabel.sizePolicy().hasHeightForWidth())
        self.ProgramLabel.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(24)
        self.ProgramLabel.setFont(font)
        self.ProgramLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ProgramLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ProgramLabel.setObjectName("ProgramLabel")
        self.PathFolderButton = QtWidgets.QPushButton(self.centralwidget)
        self.PathFolderButton.setGeometry(QtCore.QRect(30, 140, 111, 31))
        self.PathFolderButton.setObjectName("PathFolderButton")
        self.CreateButton = QtWidgets.QPushButton(self.centralwidget)
        self.CreateButton.setGeometry(QtCore.QRect(230, 300, 351, 51))
        self.CreateButton.clicked.connect(self.generate_gif)

        font = QtGui.QFont()
        font.setPointSize(13)
        self.CreateButton.setFont(font)
        self.CreateButton.setObjectName("CreateButton")
        self.FilePathLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.FilePathLineEdit.setGeometry(QtCore.QRect(150, 140, 621, 31))
        self.FilePathLineEdit.setObjectName("FilePathLineEdit")
        self.FileNamePathEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.FileNamePathEdit.setGeometry(QtCore.QRect(150, 220, 621, 31))
        self.FileNamePathEdit.setObjectName("FileNamePathEdit")
        self.GifCreatorProgress = QtWidgets.QProgressBar(self.centralwidget)

        self.GifCreatorProgress.setGeometry(QtCore.QRect(70, 360, 671, 23))
        self.GifCreatorProgress.setProperty("value", 24)
        self.GifCreatorProgress.setObjectName("GifCreatorProgress")
        self.GifCreatorProgress.hide()
        self.SaveFolderButton = QtWidgets.QPushButton(self.centralwidget)
        self.SaveFolderButton.setGeometry(QtCore.QRect(30, 180, 111, 31))
        self.SaveFolderButton.setObjectName("SaveFolderButton")
        self.SavePathLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.SavePathLineEdit.setGeometry(QtCore.QRect(150, 180, 621, 31))
        self.SavePathLineEdit.setText("")
        self.SavePathLineEdit.setObjectName("SavePathLineEdit")
        self.fpsLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.fpsLineEdit.setGeometry(QtCore.QRect(190, 260, 161, 31))
        self.fpsLineEdit.setObjectName("fpsLineEdit")

        self.fpsLineValidator = QtGui.QIntValidator(bottom=1)
        self.fpsLineValidator.setBottom(1)
        self.fpsLineEdit.setValidator(self.fpsLineValidator)

        self.dpiLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.dpiLineEdit.setGeometry(QtCore.QRect(400, 260, 171, 31))
        self.dpiLineEdit.setObjectName("dpiLineEdit")

        self.dpiLineValidator = QtGui.QIntValidator(bottom=1)
        self.dpiLineValidator.setBottom(1)
        self.dpiLineEdit.setValidator(self.dpiLineValidator)

        self.fpsLabel = QtWidgets.QLabel(self.centralwidget)
        self.fpsLabel.setGeometry(QtCore.QRect(150, 260, 61, 31))
        self.fpsLabel.setObjectName("fpsLabel")
        self.dpiLabel = QtWidgets.QLabel(self.centralwidget)
        self.dpiLabel.setGeometry(QtCore.QRect(360, 260, 31, 31))
        self.dpiLabel.setObjectName("dpiLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SimGIF creator"))
        self.ProgramLabel.setText(_translate("MainWindow", "Sim GIF"))
        self.PathFolderButton.setText(
            _translate("MainWindow", "Select Folder"))
        self.PathFolderButton.clicked.connect(self.open_data_folder)
        self.CreateButton.setText(_translate("MainWindow", "Create GIF file"))
        self.FilePathLineEdit.setPlaceholderText(
            _translate("MainWindow", "File path"))
        self.FileNamePathEdit.setPlaceholderText(_translate(
            "MainWindow", "Result file name, by default folder name"))
        self.SaveFolderButton.setText(_translate("MainWindow", "Save Folder"))
        self.SaveFolderButton.clicked.connect(
            self.open_save_folder)
        self.SavePathLineEdit.setPlaceholderText(
            _translate("MainWindow", "Save path"))
        self.fpsLineEdit.setText(_translate("MainWindow", "6"))
        self.fpsLineEdit.setPlaceholderText(_translate("MainWindow", "fps"))

        self.dpiLineEdit.setText(_translate("MainWindow", "100"))
        self.dpiLineEdit.setPlaceholderText(_translate("MainWindow", "dpi"))
        self.fpsLabel.setText(_translate("MainWindow", "FPS:"))
        self.dpiLabel.setText(_translate("MainWindow", "DPI:"))

    def open_data_folder(self):
        path = QtWidgets.QFileDialog.getExistingDirectory(
            MainWindow, "Select Directory")
        self.FilePathLineEdit.setText(path)

    def open_save_folder(self):
        path = QtWidgets.QFileDialog.getExistingDirectory(
            MainWindow, "Select Directory")
        self.SavePathLineEdit.setText(path)

    def update_progress_bar(self, i):
        self.GifCreatorProgress.setValue(i)

    def generate_gif(self):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        try:
            if int(self.dpiLineEdit.text()) <= 0:
                raise ValueError("DPI must be positive integer number.")
            if int(self.dpiLineEdit.text()) <= 0:
                raise ValueError("FPS must be positive integer number.")
            if not os.path.exists(self.FilePathLineEdit.text()):
                raise ValueError("Data files path not found.")
            if not os.path.exists(self.SavePathLineEdit.text()):
                raise ValueError("Save path not found.")
        except ValueError as e:
            msg.setText(str(e))
            msg.exec()
            return

        path = self.FilePathLineEdit.text()
        save_path = self.SavePathLineEdit.text()
        file = self.FileNamePathEdit.text()
        # ProgressBar
        data_amount = len(np.load("{}/steps.npy".format(path)))
        self.GifCreatorProgress.setMinimum(0)
        self.GifCreatorProgress.setMaximum(data_amount-1)
        self.GifCreatorProgress.setValue(0)
        self.GifCreatorProgress.show()

        self.thread = QtCore.QThread()
        self.worker = Worker(path=path, save_path=save_path, file=file, fps=int(
            self.fpsLineEdit.text()), dpi=int(self.dpiLineEdit.text()))
        self.worker.moveToThread(self.thread)

        # connect
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.update_progress_bar)
        self.worker.error.connect(self.threadExceptionHandler)
        # Step 6: Start the thread
        self.thread.start()

    def threadExceptionHandler(self, exception):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        msg.setText(str(exception))
        msg.exec()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
